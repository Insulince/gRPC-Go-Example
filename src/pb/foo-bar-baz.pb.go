// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/pb/foo-bar-baz.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	src/pb/foo-bar-baz.proto

It has these top-level messages:
	FooBarBaz
	UnaryRequest
	UnaryResponse
	ServerStreamRequest
	ServerStreamResponse
	ClientStreamRequest
	ClientStreamResponse
	BidirectionalStreamRequest
	BidirectionalStreamResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MODELS
type FooBarBaz struct {
	Foo string `protobuf:"bytes,1,opt,name=foo" json:"foo,omitempty"`
	Bar int64  `protobuf:"varint,2,opt,name=bar" json:"bar,omitempty"`
	Baz bool   `protobuf:"varint,3,opt,name=baz" json:"baz,omitempty"`
}

func (m *FooBarBaz) Reset()                    { *m = FooBarBaz{} }
func (m *FooBarBaz) String() string            { return proto.CompactTextString(m) }
func (*FooBarBaz) ProtoMessage()               {}
func (*FooBarBaz) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FooBarBaz) GetFoo() string {
	if m != nil {
		return m.Foo
	}
	return ""
}

func (m *FooBarBaz) GetBar() int64 {
	if m != nil {
		return m.Bar
	}
	return 0
}

func (m *FooBarBaz) GetBaz() bool {
	if m != nil {
		return m.Baz
	}
	return false
}

// REQUEST AND RESPONSE TYPES
type UnaryRequest struct {
	FooBarBaz *FooBarBaz `protobuf:"bytes,1,opt,name=fooBarBaz" json:"fooBarBaz,omitempty"`
}

func (m *UnaryRequest) Reset()                    { *m = UnaryRequest{} }
func (m *UnaryRequest) String() string            { return proto.CompactTextString(m) }
func (*UnaryRequest) ProtoMessage()               {}
func (*UnaryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UnaryRequest) GetFooBarBaz() *FooBarBaz {
	if m != nil {
		return m.FooBarBaz
	}
	return nil
}

type UnaryResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *UnaryResponse) Reset()                    { *m = UnaryResponse{} }
func (m *UnaryResponse) String() string            { return proto.CompactTextString(m) }
func (*UnaryResponse) ProtoMessage()               {}
func (*UnaryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UnaryResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ServerStreamRequest struct {
	FooBarBaz *FooBarBaz `protobuf:"bytes,1,opt,name=fooBarBaz" json:"fooBarBaz,omitempty"`
}

func (m *ServerStreamRequest) Reset()                    { *m = ServerStreamRequest{} }
func (m *ServerStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*ServerStreamRequest) ProtoMessage()               {}
func (*ServerStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ServerStreamRequest) GetFooBarBaz() *FooBarBaz {
	if m != nil {
		return m.FooBarBaz
	}
	return nil
}

type ServerStreamResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ServerStreamResponse) Reset()                    { *m = ServerStreamResponse{} }
func (m *ServerStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*ServerStreamResponse) ProtoMessage()               {}
func (*ServerStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ServerStreamResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ClientStreamRequest struct {
	FooBarBaz *FooBarBaz `protobuf:"bytes,1,opt,name=fooBarBaz" json:"fooBarBaz,omitempty"`
}

func (m *ClientStreamRequest) Reset()                    { *m = ClientStreamRequest{} }
func (m *ClientStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*ClientStreamRequest) ProtoMessage()               {}
func (*ClientStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ClientStreamRequest) GetFooBarBaz() *FooBarBaz {
	if m != nil {
		return m.FooBarBaz
	}
	return nil
}

type ClientStreamResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ClientStreamResponse) Reset()                    { *m = ClientStreamResponse{} }
func (m *ClientStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*ClientStreamResponse) ProtoMessage()               {}
func (*ClientStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ClientStreamResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type BidirectionalStreamRequest struct {
	FooBarBaz *FooBarBaz `protobuf:"bytes,1,opt,name=fooBarBaz" json:"fooBarBaz,omitempty"`
}

func (m *BidirectionalStreamRequest) Reset()                    { *m = BidirectionalStreamRequest{} }
func (m *BidirectionalStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*BidirectionalStreamRequest) ProtoMessage()               {}
func (*BidirectionalStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BidirectionalStreamRequest) GetFooBarBaz() *FooBarBaz {
	if m != nil {
		return m.FooBarBaz
	}
	return nil
}

type BidirectionalStreamResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *BidirectionalStreamResponse) Reset()                    { *m = BidirectionalStreamResponse{} }
func (m *BidirectionalStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*BidirectionalStreamResponse) ProtoMessage()               {}
func (*BidirectionalStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BidirectionalStreamResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*FooBarBaz)(nil), "foo_bar_baz.FooBarBaz")
	proto.RegisterType((*UnaryRequest)(nil), "foo_bar_baz.UnaryRequest")
	proto.RegisterType((*UnaryResponse)(nil), "foo_bar_baz.UnaryResponse")
	proto.RegisterType((*ServerStreamRequest)(nil), "foo_bar_baz.ServerStreamRequest")
	proto.RegisterType((*ServerStreamResponse)(nil), "foo_bar_baz.ServerStreamResponse")
	proto.RegisterType((*ClientStreamRequest)(nil), "foo_bar_baz.ClientStreamRequest")
	proto.RegisterType((*ClientStreamResponse)(nil), "foo_bar_baz.ClientStreamResponse")
	proto.RegisterType((*BidirectionalStreamRequest)(nil), "foo_bar_baz.BidirectionalStreamRequest")
	proto.RegisterType((*BidirectionalStreamResponse)(nil), "foo_bar_baz.BidirectionalStreamResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FooBarBazService service

type FooBarBazServiceClient interface {
	Unary(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...grpc.CallOption) (FooBarBazService_ServerStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (FooBarBazService_ClientStreamClient, error)
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (FooBarBazService_BidirectionalStreamClient, error)
}

type fooBarBazServiceClient struct {
	cc *grpc.ClientConn
}

func NewFooBarBazServiceClient(cc *grpc.ClientConn) FooBarBazServiceClient {
	return &fooBarBazServiceClient{cc}
}

func (c *fooBarBazServiceClient) Unary(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error) {
	out := new(UnaryResponse)
	err := grpc.Invoke(ctx, "/foo_bar_baz.FooBarBazService/Unary", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooBarBazServiceClient) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...grpc.CallOption) (FooBarBazService_ServerStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FooBarBazService_serviceDesc.Streams[0], c.cc, "/foo_bar_baz.FooBarBazService/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fooBarBazServiceServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FooBarBazService_ServerStreamClient interface {
	Recv() (*ServerStreamResponse, error)
	grpc.ClientStream
}

type fooBarBazServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *fooBarBazServiceServerStreamClient) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fooBarBazServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (FooBarBazService_ClientStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FooBarBazService_serviceDesc.Streams[1], c.cc, "/foo_bar_baz.FooBarBazService/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fooBarBazServiceClientStreamClient{stream}
	return x, nil
}

type FooBarBazService_ClientStreamClient interface {
	Send(*ClientStreamRequest) error
	CloseAndRecv() (*ClientStreamResponse, error)
	grpc.ClientStream
}

type fooBarBazServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *fooBarBazServiceClientStreamClient) Send(m *ClientStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fooBarBazServiceClientStreamClient) CloseAndRecv() (*ClientStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fooBarBazServiceClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (FooBarBazService_BidirectionalStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FooBarBazService_serviceDesc.Streams[2], c.cc, "/foo_bar_baz.FooBarBazService/BidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fooBarBazServiceBidirectionalStreamClient{stream}
	return x, nil
}

type FooBarBazService_BidirectionalStreamClient interface {
	Send(*BidirectionalStreamRequest) error
	Recv() (*BidirectionalStreamResponse, error)
	grpc.ClientStream
}

type fooBarBazServiceBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *fooBarBazServiceBidirectionalStreamClient) Send(m *BidirectionalStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fooBarBazServiceBidirectionalStreamClient) Recv() (*BidirectionalStreamResponse, error) {
	m := new(BidirectionalStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FooBarBazService service

type FooBarBazServiceServer interface {
	Unary(context.Context, *UnaryRequest) (*UnaryResponse, error)
	ServerStream(*ServerStreamRequest, FooBarBazService_ServerStreamServer) error
	ClientStream(FooBarBazService_ClientStreamServer) error
	BidirectionalStream(FooBarBazService_BidirectionalStreamServer) error
}

func RegisterFooBarBazServiceServer(s *grpc.Server, srv FooBarBazServiceServer) {
	s.RegisterService(&_FooBarBazService_serviceDesc, srv)
}

func _FooBarBazService_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooBarBazServiceServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foo_bar_baz.FooBarBazService/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooBarBazServiceServer).Unary(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooBarBazService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FooBarBazServiceServer).ServerStream(m, &fooBarBazServiceServerStreamServer{stream})
}

type FooBarBazService_ServerStreamServer interface {
	Send(*ServerStreamResponse) error
	grpc.ServerStream
}

type fooBarBazServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *fooBarBazServiceServerStreamServer) Send(m *ServerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FooBarBazService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FooBarBazServiceServer).ClientStream(&fooBarBazServiceClientStreamServer{stream})
}

type FooBarBazService_ClientStreamServer interface {
	SendAndClose(*ClientStreamResponse) error
	Recv() (*ClientStreamRequest, error)
	grpc.ServerStream
}

type fooBarBazServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *fooBarBazServiceClientStreamServer) SendAndClose(m *ClientStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fooBarBazServiceClientStreamServer) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FooBarBazService_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FooBarBazServiceServer).BidirectionalStream(&fooBarBazServiceBidirectionalStreamServer{stream})
}

type FooBarBazService_BidirectionalStreamServer interface {
	Send(*BidirectionalStreamResponse) error
	Recv() (*BidirectionalStreamRequest, error)
	grpc.ServerStream
}

type fooBarBazServiceBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *fooBarBazServiceBidirectionalStreamServer) Send(m *BidirectionalStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fooBarBazServiceBidirectionalStreamServer) Recv() (*BidirectionalStreamRequest, error) {
	m := new(BidirectionalStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FooBarBazService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "foo_bar_baz.FooBarBazService",
	HandlerType: (*FooBarBazServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _FooBarBazService_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _FooBarBazService_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _FooBarBazService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStream",
			Handler:       _FooBarBazService_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/pb/foo-bar-baz.proto",
}

func init() { proto.RegisterFile("src/pb/foo-bar-baz.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0x87, 0xd9, 0xf6, 0x7d, 0x6b, 0x3b, 0xad, 0x50, 0xb6, 0x22, 0x31, 0x5e, 0x62, 0x2e, 0xc6,
	0x43, 0xd3, 0x52, 0x05, 0x6f, 0x82, 0x51, 0xbc, 0x78, 0x4b, 0xe9, 0xc5, 0x4b, 0xd9, 0x8d, 0x1b,
	0x08, 0xd4, 0x4c, 0xdc, 0x4d, 0x05, 0xf3, 0xa1, 0xfd, 0x0c, 0x92, 0xf4, 0x8f, 0x49, 0x59, 0x8d,
	0x60, 0x6f, 0x9b, 0xc9, 0xe4, 0x79, 0x86, 0xf9, 0x65, 0xc1, 0x50, 0x32, 0x18, 0x25, 0x7c, 0x14,
	0x22, 0x0e, 0x39, 0x93, 0x43, 0xce, 0x32, 0x37, 0x91, 0x98, 0x22, 0xed, 0x86, 0x88, 0x73, 0xce,
	0xe4, 0x9c, 0xb3, 0xcc, 0xbe, 0x85, 0xce, 0x03, 0xa2, 0xc7, 0xa4, 0xc7, 0x32, 0xda, 0x87, 0x66,
	0x88, 0x68, 0x10, 0x8b, 0x38, 0x1d, 0x3f, 0x3f, 0xe6, 0x15, 0xce, 0xa4, 0xd1, 0xb0, 0x88, 0xd3,
	0xf4, 0xf3, 0xe3, 0xaa, 0x92, 0x19, 0x4d, 0x8b, 0x38, 0xed, 0xbc, 0x92, 0xd9, 0xf7, 0xd0, 0x9b,
	0xc5, 0x4c, 0xbe, 0xfb, 0xe2, 0x75, 0x29, 0x54, 0x4a, 0xaf, 0xa0, 0x13, 0x6e, 0x90, 0x05, 0xab,
	0x3b, 0x39, 0x76, 0x4b, 0x4e, 0x77, 0x2b, 0xf4, 0xbf, 0x1a, 0xed, 0x0b, 0x38, 0x5c, 0x53, 0x54,
	0x82, 0xb1, 0x12, 0xd4, 0x80, 0x03, 0xb5, 0x0c, 0x02, 0xa1, 0x54, 0x01, 0x69, 0xfb, 0x9b, 0x47,
	0xfb, 0x11, 0x06, 0x53, 0x21, 0xdf, 0x84, 0x9c, 0xa6, 0x52, 0xb0, 0x97, 0xbf, 0x79, 0xc7, 0x70,
	0x54, 0x85, 0xfd, 0x46, 0x7f, 0xb7, 0x88, 0x44, 0x9c, 0xee, 0x49, 0x5f, 0x85, 0xd5, 0xea, 0x7d,
	0x30, 0xbd, 0xe8, 0x39, 0x92, 0x22, 0x48, 0x23, 0x8c, 0xd9, 0x62, 0x1f, 0x53, 0x5c, 0xc3, 0xa9,
	0x96, 0x59, 0x37, 0xcc, 0xe4, 0xa3, 0x01, 0xfd, 0x2d, 0x31, 0xdf, 0x63, 0x14, 0x08, 0x7a, 0x03,
	0xff, 0x8b, 0x28, 0xe9, 0x49, 0xc5, 0x5c, 0xfe, 0x49, 0x4c, 0x53, 0xf7, 0x6a, 0xad, 0x9b, 0x41,
	0xaf, 0x1c, 0x09, 0xb5, 0x2a, 0xbd, 0x9a, 0xe8, 0xcd, 0xb3, 0x1f, 0x3a, 0x56, 0xd0, 0x31, 0xc9,
	0xb1, 0xe5, 0x55, 0xef, 0x60, 0x35, 0x91, 0xee, 0x60, 0x75, 0x39, 0x39, 0x84, 0x2e, 0x60, 0xa0,
	0xd9, 0x1d, 0x3d, 0xaf, 0x7c, 0xfb, 0x7d, 0x62, 0xa6, 0x53, 0xdf, 0xb8, 0x71, 0x8d, 0x89, 0xd7,
	0x7a, 0xfa, 0xe7, 0x8e, 0x12, 0xce, 0x5b, 0xc5, 0x5d, 0xbe, 0xfc, 0x0c, 0x00, 0x00, 0xff, 0xff,
	0x88, 0x3f, 0xbd, 0x2c, 0xe7, 0x03, 0x00, 0x00,
}
